// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: recipe/schema.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'account';

/** Define scalar types */
export interface DateMessage {
  /** Use string to represent Date; could be in ISO8601 format or a timestamp */
  value: string;
}

export interface Void {}

/** Account message (representing the GraphQL Account type) */
export interface Account {
  id: string;
  name: string;
  email: string;
  password: string;
  /** Optional, could be null or omitted if not set */
  lockedAt: DateMessage | undefined;
}

/** Input for opening an account (GraphQL input type OpenAccountRequest) */
export interface OpenAccountRequest {
  name: string;
  email: string;
  password: string;
}

/** Meta information (GraphQL Meta type) */
export interface Meta {
  count: number;
}

/** Request for GetAccount */
export interface FindAccountByIdRequest {
  id: string;
}

/** Request for CloseAccount */
export interface CloseAccountRequest {
  id: string;
}

export const ACCOUNT_PACKAGE_NAME = 'account';

/** Define the service */

export interface AccountServiceClient {
  /** Query: Get account by ID */

  findAccountById(
    request: FindAccountByIdRequest,
    metadata?: Metadata,
  ): Observable<Account>;

  /** Mutation: Open a new account */

  openAccount(
    request: OpenAccountRequest,
    metadata?: Metadata,
  ): Observable<Void>;

  /** Mutation: Close an account */

  closeAccount(
    request: CloseAccountRequest,
    metadata?: Metadata,
  ): Observable<Void>;
}

/** Define the service */

export interface AccountServiceController {
  /** Query: Get account by ID */

  findAccountById(
    request: FindAccountByIdRequest,
    metadata?: Metadata,
  ): Promise<Account> | Observable<Account> | Account;

  /** Mutation: Open a new account */

  openAccount(
    request: OpenAccountRequest,
    metadata?: Metadata,
  ): Promise<Void> | Observable<Void> | Void;

  /** Mutation: Close an account */

  closeAccount(
    request: CloseAccountRequest,
    metadata?: Metadata,
  ): Promise<Void> | Observable<Void> | Void;
}

export function AccountServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'findAccountById',
      'openAccount',
      'closeAccount',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AccountService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AccountService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ACCOUNT_SERVICE_NAME = 'AccountService';
