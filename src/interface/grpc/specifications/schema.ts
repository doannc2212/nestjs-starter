// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: schema.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

/** Void message for void returns */
export interface Void {
}

export interface FindOrderByIdRequest {
  id: string;
}

export interface CloseOrderRequest {
  id: string;
}

export interface AddItemRequest {
  orderId: string;
  itemId: string;
  quantity: number;
}

export interface RemoveItemRequest {
  orderId: string;
  itemId: string;
}

export interface UpdateQuantityRequest {
  orderId: string;
  itemId: string;
  quantity: number;
}

export interface OrderItem {
  id: string;
  itemId: string;
  orderId: string;
  quantity: number;
}

export interface Order {
  id: string;
  userId: string;
  address: string;
  orderItems: OrderItem[];
  /** ISO8601 format e.g., "2024-03-10T15:30:00Z" */
  createdAt: string;
  /** ISO8601 format e.g., "2024-03-10T15:30:00Z" */
  updatedAt: string;
  /** ISO8601 format e.g., "2024-03-10T15:30:00Z" */
  deletedAt: string;
}

export interface CreateOrderRequest {
  userId: string;
  address: string;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest, metadata?: Metadata): Observable<Void>;

  findOrderById(request: FindOrderByIdRequest, metadata?: Metadata): Observable<Order>;

  addItem(request: AddItemRequest, metadata?: Metadata): Observable<Void>;

  removeItem(request: RemoveItemRequest, metadata?: Metadata): Observable<Void>;

  updateQuantity(request: UpdateQuantityRequest, metadata?: Metadata): Observable<Void>;

  closeOrder(request: CloseOrderRequest, metadata?: Metadata): Observable<Void>;
}

export interface OrderServiceController {
  createOrder(request: CreateOrderRequest, metadata?: Metadata): Promise<Void> | Observable<Void> | Void;

  findOrderById(request: FindOrderByIdRequest, metadata?: Metadata): Promise<Order> | Observable<Order> | Order;

  addItem(request: AddItemRequest, metadata?: Metadata): Promise<Void> | Observable<Void> | Void;

  removeItem(request: RemoveItemRequest, metadata?: Metadata): Promise<Void> | Observable<Void> | Void;

  updateQuantity(request: UpdateQuantityRequest, metadata?: Metadata): Promise<Void> | Observable<Void> | Void;

  closeOrder(request: CloseOrderRequest, metadata?: Metadata): Promise<Void> | Observable<Void> | Void;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createOrder",
      "findOrderById",
      "addItem",
      "removeItem",
      "updateQuantity",
      "closeOrder",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
